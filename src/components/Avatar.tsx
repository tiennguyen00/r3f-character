/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { Suspense, useEffect, useRef } from "react";
import { useGLTF } from "@react-three/drei";
import * as THREE from "three";
import { useCategories } from "../store";
import Asset from "./Asset";
import { GLTFExporter } from "three/examples/jsm/Addons.js";

export function Avatar({ props }: { props?: THREE.Group }) {
  const group = useRef<THREE.Group>(null);
  const { nodes } = useGLTF("/Armature.glb");

  const [customization, setDownload] = useCategories((s) => [
    s.customization,
    s.setDownload,
  ]);

  useEffect(() => {
    if (!group.current) return;
    const save = (blob: Blob, filename: string) => {
      const link = document.createElement("a");
      link.style.display = "none";
      document.body.appendChild(link);
      link.href = URL.createObjectURL(blob);
      link.download = filename;
      link.click();
    };
    const download = () => {
      const exporter = new GLTFExporter();
      exporter.parse(
        group.current!,
        (result) => {
          save(
            new Blob([result as BlobPart], {
              type: "application/octet-stream",
            }),
            `avatar_${+new Date()}.glb`
          );
        },
        (err) => {
          console.error(err);
        },
        {
          binary: true,
        }
      );
    };

    setDownload(download);
  }, [group.current, customization]);

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="Armature" rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <primitive object={nodes.mixamorigHips} />
          {customization.map((c, i) => (
            <Suspense key={c.model + i}>
              <Asset url={c.model} skeleton={nodes.Plane.skeleton} />
            </Suspense>
          ))}
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/Armature.glb");
